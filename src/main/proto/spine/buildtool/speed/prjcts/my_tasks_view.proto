/*
 * Copyright 2023, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package spine.buildtool.speed.prjcts;

import "spine/options.proto";

option java_package = "io.spine.buildtool.speed.prjcts";
option java_outer_classname = "MyTasksProto";
option java_multiple_files = true;
option (type_url_prefix) = "type.spine.io";

import "spine/buildtool/speed/prjcts/identifiers.proto";
import "spine/buildtool/speed/prjcts/task.proto";
import "spine/buildtool/speed/prjcts/label.proto";
import "spine/people/person_name.proto";

message MyTasks {
    option (entity).kind = PROJECTION;

    UserId user = 1;

    repeated Task tasks = 2;

    // The map of human-readable named mentioned in the `tasks` via their IDs.
    //
    // The map key is the user ID value.
    //
    map<string, spine.people.PersonName> involved_users = 3;

    // The map of displayable labels applied to the `tasks`.
    //
    // The map key is the label ID value.
    //
    map<string, Label> used_labels = 4;
}

message TaskCounter {
    option (entity).kind = PROJECTION;

    TaskCounterId id = 1;

    uint32 open = 2 [(min).value = "0", (max).value = "42"];

    uint32 in_review = 3 [(min).value = "0", (max).value = "42", (max).exclusive = true];

    uint32 completed = 4 [
        (min).value = "0",
        (max).value = "1080",
        (min).error_msg = "Too few tasks completed."
    ];

    uint32 canceled = 5 [(min).value = "0", (max).value = "2048"];

    uint32 rejected = 6 [(min).value = "0", (max).value = "11111"];
}
